type Post {
  id: ID!
  authorId: ID!
  content: String!
  areCommentsAllowed: Boolean!
  createdAt: String!
  updatedAt: String!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  postId: ID!
  parentCommentId: ID
  authorId: ID!
  content: String!
  createdAt: String!
  updatedAt: String!
  replies: [Comment!]!
}

type Query {

  getPost(first: Int!): [Post]
  getPostById(id: ID!): Post!
  getCommentByPostId(postId: ID!,first: Int!): [Comment]
  getCommentByParentCommentId(parentCommentId: ID!,first: Int!): [Comment]

}

type Mutation {

  createPost(input: createPostInput!): Post!
  postComment(input: postCommentInput!): Comment!

  putPost(input: putPostInput!): Post!
  putComment(input: putCommentInput!): Comment!

  deletePost(id: ID!): Boolean!
  deleteComment(id: ID!): Boolean!

}


input createPostInput {
  authorId: ID!
  content: String!
  areCommentsAllowed: Boolean!
}

input postCommentInput {
  postId: ID!
  parentCommentId: ID
  authorId: ID!
  content: String!
}

input putPostInput {
  id: ID!
  content: String
  areCommentsAllowed: Boolean
}

input putCommentInput {
  id: ID!
  content: String!
}

type Subscription {
  subscriptionForComment(postId: ID!): Comment!
}