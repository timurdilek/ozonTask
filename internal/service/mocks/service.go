// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/service.go -destination=internal/service/mocks/service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "ozon/internal/transport/graph/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockRepository) CreatePost(ctx context.Context, input model.CreatePostInput) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, input)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockRepositoryMockRecorder) CreatePost(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockRepository)(nil).CreatePost), ctx, input)
}

// DeleteComment mocks base method.
func (m *MockRepository) DeleteComment(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockRepositoryMockRecorder) DeleteComment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockRepository)(nil).DeleteComment), ctx, id)
}

// DeletePost mocks base method.
func (m *MockRepository) DeletePost(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockRepositoryMockRecorder) DeletePost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockRepository)(nil).DeletePost), ctx, id)
}

// GetCommentByParentCommentID mocks base method.
func (m *MockRepository) GetCommentByParentCommentID(ctx context.Context, parentCommentID string, first int32) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByParentCommentID", ctx, parentCommentID, first)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByParentCommentID indicates an expected call of GetCommentByParentCommentID.
func (mr *MockRepositoryMockRecorder) GetCommentByParentCommentID(ctx, parentCommentID, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByParentCommentID", reflect.TypeOf((*MockRepository)(nil).GetCommentByParentCommentID), ctx, parentCommentID, first)
}

// GetCommentByPostID mocks base method.
func (m *MockRepository) GetCommentByPostID(ctx context.Context, postID string, first int32) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByPostID", ctx, postID, first)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByPostID indicates an expected call of GetCommentByPostID.
func (mr *MockRepositoryMockRecorder) GetCommentByPostID(ctx, postID, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByPostID", reflect.TypeOf((*MockRepository)(nil).GetCommentByPostID), ctx, postID, first)
}

// GetPost mocks base method.
func (m *MockRepository) GetPost(ctx context.Context, first int32) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, first)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockRepositoryMockRecorder) GetPost(ctx, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockRepository)(nil).GetPost), ctx, first)
}

// GetPostByID mocks base method.
func (m *MockRepository) GetPostByID(ctx context.Context, id string) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ctx, id)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockRepositoryMockRecorder) GetPostByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockRepository)(nil).GetPostByID), ctx, id)
}

// PostComment mocks base method.
func (m *MockRepository) PostComment(ctx context.Context, input model.PostCommentInput) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostComment", ctx, input)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostComment indicates an expected call of PostComment.
func (mr *MockRepositoryMockRecorder) PostComment(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostComment", reflect.TypeOf((*MockRepository)(nil).PostComment), ctx, input)
}

// PutComment mocks base method.
func (m *MockRepository) PutComment(ctx context.Context, input model.PutCommentInput) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutComment", ctx, input)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutComment indicates an expected call of PutComment.
func (mr *MockRepositoryMockRecorder) PutComment(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutComment", reflect.TypeOf((*MockRepository)(nil).PutComment), ctx, input)
}

// PutPost mocks base method.
func (m *MockRepository) PutPost(ctx context.Context, input model.PutPostInput) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPost", ctx, input)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPost indicates an expected call of PutPost.
func (mr *MockRepositoryMockRecorder) PutPost(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPost", reflect.TypeOf((*MockRepository)(nil).PutPost), ctx, input)
}
