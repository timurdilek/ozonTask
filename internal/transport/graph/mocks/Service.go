// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "ozon/internal/transport/graph/model"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeleteComment provides a mock function with given fields: ctx, id
func (_m *Service) DeleteComment(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: ctx, id
func (_m *Service) DeletePost(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentByParentCommentID provides a mock function with given fields: ctx, parentCommentID, first
func (_m *Service) GetCommentByParentCommentID(ctx context.Context, parentCommentID string, first int32) ([]*model.Comment, error) {
	ret := _m.Called(ctx, parentCommentID, first)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByParentCommentID")
	}

	var r0 []*model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) ([]*model.Comment, error)); ok {
		return rf(ctx, parentCommentID, first)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) []*model.Comment); ok {
		r0 = rf(ctx, parentCommentID, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32) error); ok {
		r1 = rf(ctx, parentCommentID, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentByPostID provides a mock function with given fields: ctx, postID, first
func (_m *Service) GetCommentByPostID(ctx context.Context, postID string, first int32) ([]*model.Comment, error) {
	ret := _m.Called(ctx, postID, first)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByPostID")
	}

	var r0 []*model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) ([]*model.Comment, error)); ok {
		return rf(ctx, postID, first)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) []*model.Comment); ok {
		r0 = rf(ctx, postID, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32) error); ok {
		r1 = rf(ctx, postID, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPost provides a mock function with given fields: ctx, first
func (_m *Service) GetPost(ctx context.Context, first int32) ([]*model.Post, error) {
	ret := _m.Called(ctx, first)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 []*model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*model.Post, error)); ok {
		return rf(ctx, first)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*model.Post); ok {
		r0 = rf(ctx, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostByID provides a mock function with given fields: ctx, id
func (_m *Service) GetPostByID(ctx context.Context, id string) (*model.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewComment provides a mock function with given fields: ctx, postID, userID
func (_m *Service) NewComment(ctx context.Context, postID int32, userID string) (<-chan *model.Comment, error) {
	ret := _m.Called(ctx, postID, userID)

	if len(ret) == 0 {
		panic("no return value specified for NewComment")
	}

	var r0 <-chan *model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) (<-chan *model.Comment, error)); ok {
		return rf(ctx, postID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) <-chan *model.Comment); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string) error); ok {
		r1 = rf(ctx, postID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostComment provides a mock function with given fields: ctx, input
func (_m *Service) PostComment(ctx context.Context, input model.PostCommentInput) (*model.Comment, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for PostComment")
	}

	var r0 *model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PostCommentInput) (*model.Comment, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PostCommentInput) *model.Comment); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PostCommentInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostPost provides a mock function with given fields: ctx, input
func (_m *Service) PostPost(ctx context.Context, input model.PostPostInput) (*model.Post, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for PostPost")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PostPostInput) (*model.Post, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PostPostInput) *model.Post); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PostPostInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutComment provides a mock function with given fields: ctx, input
func (_m *Service) PutComment(ctx context.Context, input model.PutCommentInput) (*model.Comment, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for PutComment")
	}

	var r0 *model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PutCommentInput) (*model.Comment, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PutCommentInput) *model.Comment); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PutCommentInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPost provides a mock function with given fields: ctx, input
func (_m *Service) PutPost(ctx context.Context, input model.PutPostInput) (*model.Post, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for PutPost")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PutPostInput) (*model.Post, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PutPostInput) *model.Post); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PutPostInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
